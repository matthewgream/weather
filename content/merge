#!/usr/bin/node

const config = require('./config.js');
console.log(
    `config: ` +
        Object.entries(config)
            .map(([key, value]) => key + '=' + value)
            .join(', ')
);

//

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

//

function loadWeatherDataFromCompressedJsonFile(filePath) {
    let data = null;
    try {
        const filePathTemp = path.join('.', `temp_${Math.random().toString(36).substring(2, 15)}.json`);
        execSync(`xz -dc "${filePath}" > "${filePathTemp}"`);
        data = JSON.parse(fs.readFileSync(filePathTemp, 'utf8'));
        fs.unlinkSync(filePathTemp);
    } catch (error) {
        console.error(`Error reading file ${filePath} or decoding JSON:`, error.message);
    }
    return data;
}
function loadWeatherData(directory) {
    const files = fs
        .readdirSync(directory)
        .filter((file) => file.match(/^wu-\d{6}\.json\.xz$/))
        .sort();
    console.log(`loadWeatherData: found ${files.length} weather data files.`);
    if (files.length === 0) return null;
    const masterData = { daily: {} };
    let daysTotal = 0;
    files.forEach((file) => {
        const data = loadWeatherDataFromCompressedJsonFile(path.join(directory, file));
        if (data?.daily) {
            let stripped = [];
            let day;
            for (day of Object.keys(data.daily))
                if (data.daily[day]?.observations?.length === 0) {
                    delete data.daily[day];
                    stripped.push(day);
                }
            const days = Object.keys(data.daily).length;
            daysTotal += days;
            console.log(`loadWeatherData: load ${file} ... ${days} days${stripped.length ? ', stripped ' + stripped.length + ' empty (' + stripped.join(', ') + ')' : ''}`);
            Object.assign(masterData.daily, data.daily);
        } else console.warn(`loadWeatherData: load ${file} ... no valid data found`);
    });
    const daysUnique = Object.keys(masterData.daily).length;
    console.log(`loadWeatherData: loaded data for ${daysUnique} days.`);
    if (daysTotal !== daysUnique) console.log(`loadWeatherData: warning - ${daysTotal - daysUnique} duplicate days were found and overwritten`);
    return masterData;
}

//

function checkWeatherData(data) {
    if (!data?.daily) {
        console.error('checkWeatherData: invalid data structure, missing daily property');
        return false;
    }
    const days = Object.keys(data.daily).length;
    if (days === 0) {
        console.error('checkWeatherData: no days found in data');
        return false;
    }
    console.log(`checkWeatherData: structure is correct`);
    console.log(`checkWeatherData: contains ${days} days of data`);
    const dates = Object.keys(data.daily).sort();
    if (dates.length > 0) console.log(`checkWeatherData: range: ${dates[0]} to ${dates[dates.length - 1]}`);
    return true;
}

//

const COLUMNS = [
    {
        id: 'dateTime',
        title: 'DateTime',
        width: 19,
        getValue: (obs) => (obs.obsTimeLocal !== null ? obs.obsTimeLocal.replace(/-/g, '/').replace(' ', 'T') : '-'),
        getSortValue: (obs) => obs.obsTimeLocal || '',
    },
    {
        id: 'temp',
        title: 'Temp',
        width: 8,
        getValue: (obs) => formatValue(obs.metric?.tempAvg, 1, '°C'),
    },
    {
        id: 'dewpt',
        title: 'Dewpt',
        width: 8,
        getValue: (obs) => formatValue(obs.metric?.dewptAvg, 1, '°C'),
    },
    {
        id: 'humid',
        title: 'Humid',
        width: 6,
        getValue: (obs) => formatValue(obs.humidityAvg, 0, '%'),
    },
    {
        id: 'windDir',
        title: 'Wind',
        width: 4,
        getValue: (obs) => (obs.winddirAvg !== null ? getWindDirection(obs.winddirAvg) : '-'),
    },
    {
        id: 'windSpeed',
        title: 'Speed',
        width: 9,
        getValue: (obs) => formatValue(obs.metric?.windspeedAvg, 1, 'km/h'),
    },
    {
        id: 'windGust',
        title: 'Gust',
        width: 9,
        getValue: (obs) => formatValue(obs.metric?.windgustAvg, 1, 'km/h'),
    },
    {
        id: 'pressure',
        title: 'Pressure',
        width: 11,
        getValue: (obs) => (obs.metric?.pressureMax !== null && obs.metric?.pressureMin !== null ? formatValue((obs.metric.pressureMax + obs.metric.pressureMin) / 2, 2, 'hPa') : '-'),
    },
    {
        id: 'precipRate',
        title: 'PrecipRate',
        width: 10,
        getValue: (obs) => formatValue(obs.metric?.precipRate, 2, 'mm'),
    },
    {
        id: 'precipTotal',
        title: 'PrecipTotal',
        width: 11,
        getValue: (obs) => formatValue(obs.metric?.precipTotal, 2, 'mm'),
    },
    {
        id: 'uv',
        title: 'UV',
        width: 2,
        getValue: (obs) => formatValue(obs.uvHigh, 0, ''),
    },
    {
        id: 'solar',
        title: 'Solar',
        width: 10,
        getValue: (obs) => formatValue(obs.solarRadiationHigh, 0, 'w/m²'),
    },
    {
        id: 'windChill',
        title: 'TempWind',
        width: 8,
        getValue: (obs) => formatValue(obs.metric?.windchillAvg, 1, '°C'),
    },
    {
        id: 'heatIndex',
        title: 'TempHeat',
        width: 8,
        getValue: (obs) => formatValue(obs.metric?.heatindexAvg, 1, '°C'),
    },
];

function formatValue(value, decimals, unit) {
    return value === null || value === undefined ? '-' : `${value.toFixed(decimals)} ${unit}`;
}
function getWindDirection(degrees) {
    return degrees === null || degrees === undefined ? '-' : ['N', 'NNE', 'NE', 'ENE', 'E', 'ESE', 'SE', 'SSE', 'S', 'SSW', 'SW', 'WSW', 'W', 'WNW', 'NW', 'NNW'][Math.round(degrees / 22.5) % 16];
}
function generateHeaderRow() {
    return COLUMNS.map((col) => col.title.padEnd(col.width)).join(' ');
}
function generateSeparatorRow() {
    return COLUMNS.map((col) => '-'.repeat(col.width)).join(' ');
}
function formatObservation(obs) {
    return {
        formattedRow: COLUMNS.map((col) => col.getValue(obs).padEnd(col.width)).join(' '),
        sortTime: COLUMNS[0].getSortValue(obs),
    };
}
function formatWeatherTable(data) {
    if (!data?.daily || Object.keys(data.daily).length === 0) {
        console.error('No valid weather data');
        return '';
    }
    const dates = Object.keys(data.daily).sort();
    const rows = dates
        .filter((date) => data.daily[date]?.observations && Array.isArray(data.daily[date].observations))
        .flatMap((date) => data.daily[date].observations.filter((obs) => obs && obs.obsTimeLocal).map((obs) => formatObservation(obs)));

    return [
        generateHeaderRow(),
        generateSeparatorRow(),
        ...rows.sort((a, b) => a.sortTime.localeCompare(b.sortTime)).map((obs) => obs.formattedRow),
        '',
        `Total observations: ${rows.length}` + (dates.length > 0 ? ` from ${dates[0]} to ${dates[dates.length - 1]}` : ''),
    ].join('\n');
}

//

function formatWeatherData(data) {
    return JSON.stringify(data, null, 2);
}

//

function saveWeatherData(filePath, fileData) {
    try {
        fs.writeFileSync(filePath, fileData);
        console.log(`saveWeatherData: save ${filePath}, size: ${(fs.statSync(filePath).size / (1024 * 1024)).toFixed(2)} MB`);
        return true;
    } catch (error) {
        console.error(`Error saving data:`, error.message);
        return false;
    }
}

//

function main() {
    const data = loadWeatherData(config.directory);
    if (!data) {
        console.error('Weather data load failed.');
        process.exit(1);
    }
    if (!checkWeatherData(data)) {
        console.error('Weather data validation failed.');
        process.exit(1);
    }
    if (!saveWeatherData('wu-master.json', formatWeatherData(data))) {
        console.error('Weather data save failed.');
        process.exit(1);
    }
    if (!saveWeatherData('wu-formatted.txt', formatWeatherTable(data))) {
        console.error('Weather table save failed.');
        process.exit(1);
    }
}

main();
