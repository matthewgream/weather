#!/usr/bin/node

/*
const config = {
    directory: '/opt/storage/weather/wunderground',
    start_year: 2021,
    start_month: 8, // August
    api_key: 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX',
    station_id: 'XXXXXXXX',
};
module.exports = config;
*/

const config = require('./config.js');
console.log(
    `config: ` +
        Object.entries(config)
            .map(([key, value]) => key + '=' + value)
            .join(', ')
);

//

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');
const { promisify } = require('util');
const exec = promisify(require('child_process').exec);

function fileExists(filePath) {
    try {
        return fs.existsSync(filePath);
    } catch {
        return false;
    }
}
function getDaysInMonth(year, month) {
    return new Date(year, month, 0).getDate();
}
function formatDate(year, month, day) {
    return `${year}${month.toString().padStart(2, '0')}${day.toString().padStart(2, '0')}`;
}
function formatMonth(year, month) {
    return `${year}${month.toString().padStart(2, '0')}`;
}
async function fetchWeatherData(date, stationId, apiKey) {
    try {
        const args = { stationId, format: 'json', units: 'm', date, numericPrecision: 'decimal', apiKey };
        const link = `https://api.weather.com/v2/pws/history/all?${Object.entries(args)
            .map(([key, value]) => key + '=' + value)
            .join('&')}`;
        const cmd = `wget --referer="https://www.wunderground.com/" "${link}" -O - -q`;
        const { stdout } = await exec(cmd);
        return JSON.parse(stdout);
    } catch (error) {
        console.error(`Error fetching data for ${date}:`, error.message);
        return null;
    }
}
async function processMonth(year, month, directory, stationId, apiKey) {
    const monthFormatted = formatMonth(year, month);
    const filebase = path.join(directory, `wu-${monthFormatted}.json`);
    if (fileExists(filebase + '.xz')) {
        //console.log(`Fetch skip ${monthFormatted}, file ${filebase}.xz already exists ...`);
        return 0;
    }
    console.log(`Fetch data ${monthFormatted} ...`);
    const data = { daily: {} };
    for (let day = 1; day <= getDaysInMonth(year, month); day++) {
        const date = formatDate(year, month, day);
        await new Promise((resolve) => setTimeout(resolve, 500));
        const dataDay = await fetchWeatherData(date, stationId, apiKey);
        if (dataDay) {
            console.log(`Fetch data ${date} ... ${Object.keys(dataDay?.observations || []).length} entries / ${JSON.stringify(dataDay).length} bytes`);
            data.daily[date] = dataDay;
        } else console.log(`Fetch data ${date} ... no data`);
    }
    fs.writeFileSync(filebase, JSON.stringify(data, null, 2));
    console.log(`Created ${filebase} with ${fs.statSync(filebase).size} bytes`);
    try {
        execSync(`xz -9 -f ${filebase}`);
        console.log(`Created ${filebase}.xz with ${fs.statSync(filebase + '.xz').size} bytes`);
    } catch (error) {
        console.error(`Error compressing ${filebase}:`, error.message);
    }
    return 1;
}
async function main() {
    const now = new Date(),
        year = now.getFullYear(),
        month = now.getMonth() + 1;
    const previousMonth = month === 1 ? 12 : month - 1,
        previousYear = month === 1 ? year - 1 : year;
    let currentYear = config.start_year,
        currentMonth = config.start_month;
    let count = 0,
        total = 0;
    while (currentYear < previousYear || (currentYear === previousYear && currentMonth <= previousMonth)) {
        count += await processMonth(currentYear, currentMonth, config.directory, config.station_id, config.api_key);
        total++;
        if (++currentMonth > 12) (currentMonth = 1), currentYear++;
    }
    console.log(`Fetch retrieved ${count} months of ${total} candidates from ${config.start_year}/${config.start_month} to ${previousYear}/${previousMonth}`);
}
main().catch((error) => {
    console.error('Error running main:', error);
    process.exit(1);
});
