#!/bin/bash

set -eo pipefail

function console_error() {
    local msg="$1"
    echo "$msg" >&2
}

function cmd_exists() {
    command -v "$1" > /dev/null 2>&1
}

function urlencode() {
    local string="$1"
    while [ -n "$string" ]; do
        local tail="${string#?}"
        local head="${string%"$tail"}"
        case "$head" in
            [-._~0-9A-Za-z])
                printf "%c" "$head";;
            *)
                printf "%%%02x" "'$head"
        esac
        string="$tail"
    done
}

function http_get() {
    if cmd_exists curl; then
        curl -s --user-agent "$USERAGENT" "$1"
    elif cmd_exists wget; then
        wget -q -O - --user-agent="$USERAGENT" "$1"
    else
        console_error "No http tool found. Install curl or wget."
        exit 1
    fi
}

function parse_date() {
    local string="$1"
    PARSED_DATE=$(date -d "$string" +'%s' 2>/dev/null || true)
    if [ -z "$PARSED_DATE" ] && cmd_exists gdate; then
        PARSED_DATE=$(gdate -d "$string" +'%s' 2>/dev/null || true)
    fi
    if [ -z "$PARSED_DATE" ]; then
        PARSED_DATE=$(date -jf "%Y-%m-%d %H:%M:%S" "$string" +'%s' 2>/dev/null || true)
    fi
    if [ -z "$PARSED_DATE" ]; then
        console_error "Could not parse date."
        exit 1
    fi
    return 0
}

function get_logline() {
    local host
    local response
    local response_a
    local response_b
    host="$1"
    response=$(echo "$2" | tr -cd "[:print:]")
    response_a=$(echo "$response" | awk '{ print $1 }')
    case $response_a in
        "good")
            response_b=$(echo "$response" | awk '{ print $2 }')
            LOGLINE="(good) [$host] DNS hostname successfully updated to $response_b."
            ;;
        "nochg")
            response_b=$(echo "$response" | awk '{ print $2 }')
            LOGLINE="(nochg) [$host] IP address is current: $response_b; no update performed."
            ;;
        "nohost")
            LOGLINE="(nohost) [$host] Hostname supplied does not exist under specified account. Revise config file."
            ;;
        "badauth")
            LOGLINE="(badauth) [$host] Invalid username password combination."
            ;;
        "badagent")
            LOGLINE="(badagent) [$host] Client disabled - No-IP is no longer allowing requests from this update script."
            ;;
        '!donator')
            LOGLINE='(!donator)'" [$host] An update request was sent including a feature that is not available."
            ;;
        "abuse")
            LOGLINE="(abuse) [$host] Username is blocked due to abuse."
            ;;
        "911")
            LOGLINE="(911) [$host] A fatal error on our side such as a database outage. Retry the update in no sooner than 30 minutes."
            ;;
        "")
            LOGLINE="(empty) [$host] No response received from No-IP. This may be due to rate limiting or a server-side problem."
            ;;
        *)
            LOGLINE="(error) [$host] Could not understand the response from No-IP. The DNS update server may be down."
            ;;
    esac
    return 0
}

USERAGENT="Bash No-IP Updater/1.3 $USER"
NOW=$(date +'%s')
USER=$(urlencode "$USER")
PASS=$(urlencode "$PASS")
ENCODED_HOST=$(urlencode "$HOST")
REQUEST_URL="https://$USER:$PASS@dynupdate.no-ip.com/nic/update?hostname=$ENCODED_HOST"
RESPONSE=$(http_get "$REQUEST_URL")
OIFS=$IFS
IFS=$'\n'
SPLIT_RESPONSE=( $(echo "$RESPONSE" | grep -o '[0-9a-z!]\+\( [0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\)\?') )
IFS=','
SPLIT_HOST=( $HOST )
IFS=$OIFS

for index in "${!SPLIT_HOST[@]}"; do
    get_logline "${SPLIT_HOST[index]}" "${SPLIT_RESPONSE[index]}"
    echo "$LOGDATE $LOGLINE"
done

exit 0

